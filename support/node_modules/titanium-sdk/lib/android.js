/**
 * Detects the Android development environment and its dependencies.
 *
 * @module lib/android
 *
 * @copyright
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 *
 * @license
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */

var fs = require('fs'),
	path = require('path'),
	crypto = require('crypto'),
	async = require('async'),
	spawn = require('child_process').spawn,
	appc = require('node-appc'),
	manifestJson = appc.pkginfo.manifest(module),
	__ = appc.i18n(__dirname).__,
	afs = appc.fs,
	encoding = appc.encoding,
	run = appc.subprocess.run,
	findExecutable = appc.subprocess.findExecutable,
	requiredSdkTools = ['adb', 'android', 'emulator', 'mksdcard', 'zipalign', 'aapt', 'aidl', 'dx'],
	exe = process.platform == 'win32' ? '.exe' : '',
	cmd = process.platform == 'win32' ? '.cmd' : '',
	bat = process.platform == 'win32' ? '.bat' : '',
	envCache;

/**
 * Detects current Android environment.
 * @param {Object} config - The CLI config object
 * @param {Object} opts - Detect options
 * @param {Boolean} [opts.bypassCache=false] - Bypasses the Android environment detection cache and re-queries the system
 * @param {Function} finished - Callback when detection is finished
 */
exports.detect = function detect(config, opts, finished) {
	opts || (opts = {});

	if (envCache && !opts.bypassCache) return finished(envCache);

	var androidPackageJson = opts.packageJson || {};

	async.parallel({
		sdk: function (next) {
			var queue = async.queue(function (task, callback) {
				task(function (err, result) {
					if (err) {
						callback(); // go to next item in the queue
					} else {
						next(null, result);
					}
				});
			}, 1);

			queue.drain = function () {
				// we have completely exhausted all search paths
				next(null, null);
			};

			queue.push([
				// first let's check the config's value
				function (cb) {
					findSDK(config.get('android.sdkPath'), config, androidPackageJson, cb);
				},
				// try the environment variables
				function (cb) {
					findSDK(process.env.ANDROID_SDK_ROOT, config, androidPackageJson, cb);
				},
				function (cb) {
					findSDK(process.env.ANDROID_SDK, config, androidPackageJson, cb);
				},
				// try finding the 'android' executable
				function (cb) {
					findExecutable([config.get('android.executables.android'), 'android' + bat], function (err, result) {
						if (err) {
							cb(err);
						} else {
							findSDK(path.resolve(result, '..', '..'), config, androidPackageJson, cb);
						}
					});
				},
				// try finding the 'adb' executable
				function (cb) {
					findExecutable([config.get('android.executables.adb'), 'adb' + exe], function (err, result) {
						if (err) {
							cb(err);
						} else {
							findSDK(path.resolve(result, '..', '..'), config, androidPackageJson, cb);
						}
					});
				}
			]);

			// scan various paths
			var dirs = process.platform == 'win32'
				? ['%SystemDrive%', '%ProgramFiles%', '%ProgramFiles(x86)%', '%CommonProgramFiles%', '~']
				: ['/opt', '/opt/local', '/usr', '/usr/local', '~'];

			dirs.forEach(function (dir) {
				dir = afs.resolvePath(dir);
				fs.existsSync(dir) && fs.readdirSync(dir).forEach(function (name) {
					var subdir = path.join(dir, name);
					if (/android/i.test(name) && fs.existsSync(subdir) && fs.statSync(subdir).isDirectory()) {
						queue.push(function (cb) {
							findSDK(subdir, config, androidPackageJson, cb);
						});
					}
				});
			});
		},

		ndk: function (next) {
			var queue = async.queue(function (task, callback) {
				task(function (err, result) {
					if (err) {
						callback(); // go to next item in the queue
					} else {
						next(null, result);
					}
				});
			}, 1);

			queue.drain = function () {
				// we have completely exhausted all search paths
				next(null, null);
			};

			queue.push([
				// first let's check the config's value
				function (cb) {
					findNDK(config.get('android.ndkPath'), config, cb);
				},
				// try the environment variable
				function (cb) {
					findNDK(process.env.ANDROID_NDK, config, cb);
				},
				// try finding the 'ndk-build' executable
				function (cb) {
					findExecutable([config.get('android.executables.ndkbuild'), 'ndk-build' + cmd], function (err, result) {
						if (err) {
							cb(err);
						} else {
							findNDK(path.dirname(result), config, cb);
						}
					});
				}
			]);

			// scan various paths
			var dirs = process.platform == 'win32'
				? ['%SystemDrive%', '%ProgramFiles%', '%ProgramFiles(x86)%', '%CommonProgramFiles%', '~']
				: ['/opt', '/opt/local', '/usr', '/usr/local', '~'];

			dirs.forEach(function (dir) {
				dir = afs.resolvePath(dir);
				fs.existsSync(dir) && fs.readdirSync(dir).forEach(function (name) {
					var subdir = path.join(dir, name);
					if (/android/i.test(name) && fs.statSync(subdir).isDirectory()) {
						queue.push(function (cb) {
							findNDK(subdir, config, cb);
						});
					}
				});
			});
		},

		linux64bit: function (next) {
			// detect if we're using a 64-bit Linux OS that's missing 32-bit libraries
			if (process.platform == 'linux' && process.arch == 'x64') {
				var result = {
					libGL: fs.existsSync('/usr/lib/libGL.so'),
					i386arch: null,
					ia32libs: null,
					glibc: null,
					libstdcpp: null
				};
				async.parallel([
					function (cb) {
						findExecutable([config.get('linux.dpkg'), 'dpkg'], function (err, dpkg) {
							if (err || !dpkg) return cb();

							var archs = {};
							run(dpkg, '--print-architecture', function (code, stdout, stderr) {
								stdout.split('\n').forEach(function (line) {
									(line = line.trim()) && (archs[line] = 1);
								});
								run(dpkg, '--print-foreign-architectures', function (code, stdout, stderr) {
									stdout.split('\n').forEach(function (line) {
										(line = line.trim()) && (archs[line] = 1);
									});

									// now that we have the architectures, make sure we have the i386 architecture
									result.i386arch = !!archs.i386;
									cb();
								});
							});
						});
					},
					function (cb) {
						findExecutable([config.get('linux.dpkgquery'), 'dpkg-query'], function (err, dpkgquery) {
							if (err || !dpkgquery) return cb();

							run(dpkgquery, ['-l', 'ia32-libs'], function (code, stdout, stderr) {
								result.ia32libs = !code;
								cb();
							});
						});
					},
					function (cb) {
						findExecutable([config.get('linux.rpm'), 'rpm'], function (err, rpm) {
							if (err || !rpm) return cb();

							run(rpm, '-qa', function (code, stdout, stderr) {
								stdout.split('\n').forEach(function (line) {
									if (/^glibc\-/.test(line)) {
										if (/\.i[36]86$/.test(line)) {
											result.glibc = true;
										} else if (result.glibc !== true) {
											result.glibc = false;
										}
									}
									if (/^libstdc\+\+\-/.test(line)) {
										if (/\.i[36]86$/.test(line)) {
											result.libstdcpp = true;
										} else if (result.libstdcpp !== true) {
											result.libstdcpp = false;
										}
									}
								});
								cb();
							});
						});
					}
				], function () {
					next(null, result);
				});
			} else {
				next(null, null);
			}
		}

	}, function (err, results) {
		var sdkHome = process.env.ANDROID_SDK_HOME && afs.resolvePath(process.env.ANDROID_SDK_HOME);

		results.home               = sdkHome && fs.existsSync(sdkHome) && fs.statSync(sdkHome).isDirectory() ? sdkHome : afs.resolvePath('~/.android');
		results.detectVersion      = '2.0';
		results.vendorDependencies = androidPackageJson.vendorDependencies;
		results.targets            = {};
		results.avds               = [];
		results.issues             = [];

		function finalize() {
			finished(envCache = results);
		}

		if (results.linux64bit !== null) {
			if (!results.linux64bit.libGL) {
				results.issues.push({
					id: 'ANDROID_MISSING_LIBGL',
					type: 'warning',
					message: __('Unable to locate an /usr/lib/libGL.so.') + '\n'
						+ __('Without the libGL library, the Android Emulator may not work properly.') + '\n'
						+ __('You may be able to fix it by reinstalling your graphics drivers and make sure it installs the 32-bit version.')
				});
			}

			if (results.linux64bit.i386arch === false) {
				results.issues.push({
					id: 'ANDROID_MISSING_I386_ARCH',
					type: 'warning',
					message: __('i386 architecture is not configured.') + '\n'
						+ __('To ensure you install the required 32-bit libraries, you need to register the i386 architecture with dpkg.') + '\n'
						+ __('To add the i386 architecture, run "%s".', '__sudo dpkg --add-architecture i386__')
				});
			}

			if (results.linux64bit.ia32libs === false) {
				results.issues.push({
					id: 'ANDROID_MISSING_IA32_LIBS',
					type: 'warning',
					message: __('32-bit libraries is not installed.') + '\n'
						+ __('Without the 32-bit libraries, the Android Emulator will not work properly.') + '\n'
						+ __('To install the required 32-bit libraries, run "%s".', '__sudo apt-get install ia32-libs__')
				});
			}

			if (results.linux64bit.glibc === false) {
				results.issues.push({
					id: 'ANDROID_MISSING_32BIT_GLIBC',
					type: 'warning',
					message: __('32-bit glibc library is not installed.') + '\n'
						+ __('Without the 32-bit glibc library, the Android Emulator will not work properly.') + '\n'
						+ __('To install the required 32-bit glibc library, run "%s".', '__sudo yum install glibc.i686__')
				});
			}

			if (results.linux64bit.libstdcpp === false) {
				results.issues.push({
					id: 'ANDROID_MISSING_32BIT_LIBSTDCPP',
					type: 'warning',
					message: __('32-bit libstdc++ library is not installed.') + '\n'
						+ __('Without the 32-bit libstdc++ library, the Android Emulator will not work properly.') + '\n'
						+ __('To install the required 32-bit libstdc++ library, run "%s".', '__sudo yum install libstdc++.i686__')
				});
			}
		}

		if (!results.ndk) {
			results.issues.push({
				id: 'ANDROID_NDK_NOT_FOUND',
				type: 'warning',
				message: __('Unable to locate an Android NDK.') + '\n'
					+ __('Without the NDK, you will not be able to build native Android Titanium modules.') + '\n'
					+ __("If you have already downloaded and installed the Android NDK, you can tell Titanium where the Android NDK is located by running '%s', otherwise you can install it by running '%s' or manually downloading from %s.",
						'__titanium config android.ndkPath /path/to/android-ndk__',
						'__titanium setup android__',
						'__http://developer.android.com/tools/sdk/ndk__')
			});
		}

		// if we don't have an android sdk, then nothing else to do
		if (!results.sdk) {
			results.issues.push({
				id: 'ANDROID_SDK_NOT_FOUND',
				type: 'error',
				message: __('Unable to locate an Android SDK.') + '\n'
					+ __("If you have already downloaded and installed the Android SDK, you can tell Titanium where the Android SDK is located by running '%s', otherwise you can install it by running '%s' or manually downloading from %s.",
						'__titanium config android.ndkPath /path/to/android-ndk__',
						'__titanium setup android__',
						'__http://developer.android.com/sdk__')
			});
			return finalize();
		}

		// check if the sdk is missing any commands
		var missing = requiredSdkTools.filter(function (cmd) { return !results.sdk.executables[cmd]; });
		if (missing.length) {
			results.issues.push({
				id: 'ANDROID_SDK_MISSING_PROGRAMS',
				type: 'error',
				message: __("Unable to find Android SDK tools: %s.", '__' + missing.join(', ') + '__') + '\n'
					+ __('You have an incomplete or out-of-date installation.') + '\n'
					+ __("Verify your Android SDK packages or reinstall the Android SDK by running '%s' or manually downloading from %s.",
						'__titanium setup android__',
						'__http://developer.android.com/sdk__')
			});
		}

		// if Windows, check if Android is in a directory containing an ampersand (&)
		if (process.platform == 'win32' && !config.get('android.skipAmpersandCheck')) {
			var a = results.sdk.executables.android,
				d = results.sdk.executables.dx;
			if ((a && a.indexOf('&') != -1) || (d && d.indexOf('&') != -1)) {
				results.issues.push({
					id: 'ANDROID_SDK_PATH_CONTAINS_AMPERSANDS',
					type: 'error',
					message: __('Android SDK tools are located in a directory containing an ampersand (&)') + '\n'
						+ __("There is a limitation on Windows where ampersands must be escaped with a ^, however the required Android batch files (android.bat and dx.bat) do not properly handle paths containing ampersands.") + '\n'
						+ __('Please move the Android SDK to a path that does not contain an ampersand and update the Titanium CLI android.sdkPath setting.') + '\n'
						+ __('You can suppress this error by running "%s".', '__titanium config android.skipAmpersandCheck true__')
				});
			}
		}

		run(results.sdk.executables.android, 'list', { cwd: afs.resolvePath('~') }, function (err, stdout, stderr) {
			if (err) return finalize();

			// create the list of target directories and their properties
			var addons = {},
				manifestNameRegex = /^(?:name|Addon\.NameDisplay)=(.*)$/m,
				manifestVendorRegex = /^(?:vendor|Addon\.VendorDisplay)=(.*)$/m,
				manifestApiRegex = /^(?:api|AndroidVersion\.ApiLevel)=(.*)$/m,
				manifestRevisionRegex = /^(?:revision|Pkg.Revision)=(.*)$/m;
			afs.visitDirsSync(path.join(results.sdk.path, 'add-ons'), function (subDir, subDirPath) {
				var file = path.join(subDirPath, 'source.properties');
				if (!fs.existsSync(file)) {
					file = path.join(subDirPath, 'manifest.ini');
				}
				if (fs.existsSync(file)) {
					var manifest = fs.readFileSync(file).toString(),
						name = manifest.match(manifestNameRegex),
						vendor = manifest.match(manifestVendorRegex),
						api = manifest.match(manifestApiRegex),
						revision = manifest.match(manifestRevisionRegex);
					name && vendor && api && revision && (addons[name[1] + '|' + vendor[1] + '|' + api[1] + '|' + revision[1]] = subDirPath);
				}
			});

			// process the targets
			var label = 'Available Android Virtual Devices:',
				p = stdout.indexOf(label),
				targets = stdout.substring(0, p - 1).split('----------'),
				avds = stdout.substring(p + label.length).split('---------'),

				idRegex = /^id: ([^\s]+) or "(.+)"$/,
				libEntryRegex = /^\*\s+?(.+) \((.*)\)$/,
				basedOnRegex = /^Based on Android ([^\s]+) \(API level ([^)]+)\)$/,
				keyValRegex = /^\s*(.+)\: (.+)$/;

			targets.shift(); // remove the header
			targets.forEach(function (target) {
				target.split('\n\w').forEach(function (chunk) {
					chunk = chunk.trim();
					if (!chunk) return;

					var lines = chunk.split('\n'),
						m = lines.shift().match(idRegex),
						info = m && (results.targets[m[1]] = { id: m[2] }),
						i, len, line, p, key, value;

					if (!m) return; // shouldn't happen

					for (i = 0, len = lines.length; i < len; i++) {
						line = lines[i].trim();
						if (line == 'Libraries:') {
							info.libraries || (info.libraries = {});
							for (++i; i < len; i++) {
								if (m = lines[i].trim().match(libEntryRegex)) {
									if (++i < len) {
										info.libraries[m[1]] = {
											jar: m[2],
											description: lines[i].trim()
										};
									} else {
										i--;
									}
								} else {
									i--;
									break;
								}
							}
						} else if (m = line.match(basedOnRegex)) {
							info['based-on'] = {
								'android-version': m[1],
								'api-level': m[2]
							};
						} else {
							// simple key-value
							p = line.indexOf(':');
							if (p != -1) {
								key = line.substring(0, p).toLowerCase().trim().replace(/\s/g, '-');
								value = line.substring(p+1).trim();
								switch (key) {
									case 'abis':
									case 'skins':
										info[key] = value.split(',').map(function (v) {
											return v.replace('(default)', '').trim();
										});
										break;
									case 'type':
										info[key] = value.toLowerCase();
										break;
									default:
										info[key] = value;
								}
							}
						}
					}

					if (info.type == 'platform') {
						info.path = path.join(results.sdk.path, 'platforms', info.id);
						info.supported = !~~info['api-level'] || appc.version.satisfies(info['api-level'], androidPackageJson.vendorDependencies['android sdk'], true);
					} else if (info.type == 'add-on' && info['based-on']) {
						info.path = addons[info.name + '|' + info.vendor + '|' + info['based-on']['api-level'] + '|' + info.revision] || null;
						info.supported = !~~info['based-on']['api-level'] || appc.version.satisfies(info['based-on']['api-level'], androidPackageJson.vendorDependencies['android sdk'], true);
					}

					if (!info.supported) {
						results.issues.push({
							id: 'ANDROID_API_TOO_OLD',
							type: 'warning',
							message: __('Android API %s is too old and is no longer supported by Titanium SDK %s.', '__' + info.name + ' (' + info.id + ')__', manifestJson.version) + '\n' +
								__('The minimum supported Android API level by Titanium SDK %s is API level %s.', manifestJson.version, appc.version.parseMin(androidPackageJson.vendorDependencies['android sdk']))
						});
					} else if (info.supported == 'maybe') {
						results.issues.push({
							id: 'ANDROID_API_TOO_NEW',
							type: 'warning',
							message: __('Android API %s is too new and may or may not work with Titanium SDK %s.', '__' + info.name + ' (' + info.id + ')__', manifestJson.version) + '\n' +
								__('The maximum supported Android API level by Titanium SDK %s is API level %s.', manifestJson.version, appc.version.parseMax(androidPackageJson.vendorDependencies['android sdk']))
						});
					}
				});
			});

			// check that we found at least one target
			if (!Object.keys(results.targets).length) {
				results.issues.push({
					id: 'ANDROID_NO_APIS',
					type: 'error',
					message: __('No Android APIs found.') + '\n' +
						__("Run '%s' or '%s' to install the latest Android APIs.", '__titanium setup android__', '__' + results.sdk.executables.android + '__')
				});
			}

			// check that we found at least one valid target
			if (!Object.keys(results.targets).some(function (t) { return !!results.targets[t].supported; })) {
				results.issues.push({
					id: 'ANDROID_NO_VALID_APIS',
					type: 'warning',
					message: __('No valid Android APIs found that are supported by Titanium SDK %s.', manifestJson.version) + '\n' +
						__("Run '%s' or '%s' to install the latest Android APIs.", '__titanium setup android__', '__' + results.sdk.executables.android + '__')
				});
			}

			// parse the avds
			avds.forEach(function (avd) {
				if (avd = avd.trim()) {
					var lines = avd.split('\n'),
						info = {
							type: 'avd'
						},
						i, len, line, m, key;
					for (i = 0, len = lines.length; i < len; i++) {
						line = lines[i].trim();
						if (m = line.match(keyValRegex)) {
							info[m[1].toLowerCase().trim().replace(/\s/g, '-')] = m[2];
						} else if (m = line.match(basedOnRegex)) {
							info['based-on'] = {
								'android-version': m[1],
								'api-level': m[2]
							};
						}
					}
					results.avds.push(info);
				}
			});

			finalize();
		});
	});
};

exports.findSDK = findSDK;

function findSDK(dir, config, androidPackageJson, callback) {
	if (!dir) return callback(true);

	// check if the supplied directory exists and is actually a directory
	dir = afs.resolvePath(dir);
	if (!fs.existsSync(dir) || !fs.statSync(dir).isDirectory()) return callback(true);

	var proguardPath = path.join(dir, 'tools', 'proguard', 'lib', 'proguard.jar'),
		result = {
			path: dir,
			executables: {
				adb:      path.join(dir, 'platform-tools', 'adb' + exe),
				android:  path.join(dir, 'tools', 'android' + bat),
				emulator: path.join(dir, 'tools', 'emulator' + exe),
				mksdcard: path.join(dir, 'tools', 'mksdcard' + exe),
				zipalign: path.join(dir, 'tools', 'zipalign' + exe),
				// Android SDK Tools v21 and older puts aapt and aidl in the platform-tools dir.
				// For SDK Tools v22 and later, they live in the build-tools/<ver> directory.
				aapt:     path.join(dir, 'platform-tools', 'aapt' + exe),
				aidl:     path.join(dir, 'platform-tools', 'aidl' + exe),
				dx:       path.join(dir, 'platform-tools', 'dx' + bat)
			},
			proguard: fs.existsSync(proguardPath) ? proguardPath : null,
			tools: {
				path: null,
				supported: null,
				version: null
			},
			platformTools: {
				path: null,
				supported: null,
				version: null
			},
			buildTools: {
				path: null,
				supported: null,
				version: null
			}
		},
		tasks = {},
		buildToolsDir = path.join(dir, 'build-tools');

	// check if we're we have a build-tools directory
	if (fs.existsSync(buildToolsDir)) {
		var files = fs.readdirSync(buildToolsDir).sort(),
			i = 0,
			len = files.length,
			ver, file;

		for (; i < len; i++) {
			ver = files[i];
			file = path.join(buildToolsDir, ver, 'source.properties');
			if (fs.statSync(path.join(buildToolsDir, ver)).isDirectory() && fs.existsSync(file)) {
				var m = fs.readFileSync(file).toString().match(/Pkg\.Revision\s*?\=\s*?([^\s]+)/);
				if (m) {
					result.buildTools = {
						path: path.join(buildToolsDir, ver),
						supported: appc.version.satisfies(m[1], androidPackageJson.vendorDependencies['android build tools']),
						version: m[1]
					};
					var file;
					fs.existsSync(file = path.join(buildToolsDir, ver, 'aapt' + exe)) && (result.executables.aapt = file);
					fs.existsSync(file = path.join(buildToolsDir, ver, 'aidl' + exe)) && (result.executables.aidl = file);
					fs.existsSync(file = path.join(buildToolsDir, ver, 'dx' + bat)) && (result.executables.dx = file);
				}
			}
		}
	}

	// see if this sdk has all the executables we need
	requiredSdkTools.forEach(function (cmd) {
		tasks[cmd] = function (next) {
			findExecutable([
				config.get('android.executables.' + cmd),
				result.executables[cmd]
			], function (err, r) {
				next(null, r || null);
			});
		};
	});

	async.parallel(tasks, function (err, executables) {
		result.executables = executables;

		// check that we have all required sdk programs
		if (requiredSdkTools.every(function (cmd) { return !executables[cmd]; })) return callback(true);

		var file = path.join(dir, 'tools', 'source.properties');

		// check if this directory contains an android sdk
		if (!fs.existsSync(executables.adb) || !fs.existsSync(executables.android) || !fs.existsSync(file)) {
			return callback(true);
		}

		// looks like we found an android sdk, check what version
		if (fs.existsSync(file)) {
			var m = fs.readFileSync(file).toString().match(/Pkg\.Revision\s*?\=\s*?([^\s]+)/);
			if (m) {
				result.tools = {
					path: path.join(dir, 'tools'),
					supported: appc.version.satisfies(m[1], androidPackageJson.vendorDependencies['android tools']),
					version: m[1]
				};
			}
		}

		file = path.join(dir, 'platform-tools', 'source.properties');
		if (fs.existsSync(file)) {
			var m = fs.readFileSync(file).toString().match(/Pkg\.Revision\s*?\=\s*?([^\s]+)/);
			if (m) {
				result.platformTools = {
					path: path.join(dir, 'platform-tools'),
					supported: appc.version.satisfies(m[1], androidPackageJson.vendorDependencies['android platform tools']),
					version: m[1]
				};
			}
		}

		callback(null, result);
	});
}

function findNDK(dir, config, callback) {
	if (!dir) return callback(true);

	// check if the supplied directory exists and is actually a directory
	dir = afs.resolvePath(dir);
	var releasetxt = path.join(dir, 'RELEASE.TXT');
	if (!fs.existsSync(dir) || !fs.statSync(dir).isDirectory() || !fs.existsSync(releasetxt)) return callback(true);

	findExecutable([
		config.get('android.executables.ndkBuild'),
		path.join(dir, 'ndk-build' + cmd)
	], function (err, ndkBuild) {
		callback(err || !ndkBuild, {
			path: dir,
			executables: {
				ndkbuild: ndkBuild
			},
			version: fs.readFileSync(releasetxt).toString().split('\n').shift().trim()
		});
	});
}
